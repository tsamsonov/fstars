// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// filter_matrix
Rcpp::NumericMatrix filter_matrix(Rcpp::NumericMatrix matrix, Rcpp::NumericMatrix kernel);
RcppExport SEXP _fstars_filter_matrix(SEXP matrixSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(filter_matrix(matrix, kernel));
    return rcpp_result_gen;
END_RCPP
}
// get_factors_stars
Rcpp::List get_factors_stars(Rcpp::List dimensions, std::string CRS, bool curvilinear);
RcppExport SEXP _fstars_get_factors_stars(SEXP dimensionsSEXP, SEXP CRSSEXP, SEXP curvilinearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type CRS(CRSSEXP);
    Rcpp::traits::input_parameter< bool >::type curvilinear(curvilinearSEXP);
    rcpp_result_gen = Rcpp::wrap(get_factors_stars(dimensions, CRS, curvilinear));
    return rcpp_result_gen;
END_RCPP
}
// test_proj
int test_proj();
RcppExport SEXP _fstars_test_proj() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_proj());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fstars_filter_matrix", (DL_FUNC) &_fstars_filter_matrix, 2},
    {"_fstars_get_factors_stars", (DL_FUNC) &_fstars_get_factors_stars, 3},
    {"_fstars_test_proj", (DL_FUNC) &_fstars_test_proj, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_fstars(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
