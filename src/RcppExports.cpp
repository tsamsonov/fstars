// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_interpolate_xy
double rcpp_interpolate_xy(const Rcpp::NumericMatrix& matrix, const Rcpp::List& dimensions, const double& x, const double& y);
RcppExport SEXP _fstars_rcpp_interpolate_xy(SEXP matrixSEXP, SEXP dimensionsSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_interpolate_xy(matrix, dimensions, x, y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_get_factors
Rcpp::List rcpp_get_factors(const Rcpp::List& dimensions, const std::string& CRS, const bool& curvilinear);
RcppExport SEXP _fstars_rcpp_get_factors(SEXP dimensionsSEXP, SEXP CRSSEXP, SEXP curvilinearSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type CRS(CRSSEXP);
    Rcpp::traits::input_parameter< const bool& >::type curvilinear(curvilinearSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_get_factors(dimensions, CRS, curvilinear));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_filter_matrix
Rcpp::NumericMatrix rcpp_filter_matrix(const Rcpp::NumericMatrix& matrix, const Rcpp::List& dimensions, const std::string& CRS, const int& ksize, const std::vector<std::string>& stats, const bool& curvilinear, const bool& adaptive, const bool& fixed, const char* type);
RcppExport SEXP _fstars_rcpp_filter_matrix(SEXP matrixSEXP, SEXP dimensionsSEXP, SEXP CRSSEXP, SEXP ksizeSEXP, SEXP statsSEXP, SEXP curvilinearSEXP, SEXP adaptiveSEXP, SEXP fixedSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type CRS(CRSSEXP);
    Rcpp::traits::input_parameter< const int& >::type ksize(ksizeSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type curvilinear(curvilinearSEXP);
    Rcpp::traits::input_parameter< const bool& >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< const bool& >::type fixed(fixedSEXP);
    Rcpp::traits::input_parameter< const char* >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_filter_matrix(matrix, dimensions, CRS, ksize, stats, curvilinear, adaptive, fixed, type));
    return rcpp_result_gen;
END_RCPP
}
// test_proj
int test_proj();
RcppExport SEXP _fstars_test_proj() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_proj());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fstars_rcpp_interpolate_xy", (DL_FUNC) &_fstars_rcpp_interpolate_xy, 4},
    {"_fstars_rcpp_get_factors", (DL_FUNC) &_fstars_rcpp_get_factors, 3},
    {"_fstars_rcpp_filter_matrix", (DL_FUNC) &_fstars_rcpp_filter_matrix, 9},
    {"_fstars_test_proj", (DL_FUNC) &_fstars_test_proj, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_fstars(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
